from lib2to3.pytree import Base
from msilib.schema import Error
from db.models import Dish, Order, Guest
from pathlib import Path
import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram_dialog import DialogManager
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command, Text
from settings import post_channel
from states.client import RegisterUser, DishDialog, DishState
from keyboards.menu.kbds import *
from loader import dp
from settings import admin_id


@dp.message_handler(state=RegisterUser.send_contact, content_types=aiogram.types.ContentType.CONTACT)
async def process_contact(msg: Message, state: FSMContext):
    data = await state.get_data()
    await dp.bot.send_message(chat_id=admin_id,
                              text=f"""Order: {data['order']}""")
    await msg.forward(chat_id=admin_id)
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, —è –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é –í–∞—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏",
                     reply_markup=ReplyKeyboardRemove())
    await state.reset_state(with_data=True)


@dp.message_handler(Text(equals=["‚ùå –û—Ç–º–µ–Ω–∞"]), state=RegisterUser.send_contact)
async def cancel_record(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await state.reset_state(with_data=True)


@dp.message_handler(state=RegisterUser.send_contact)
async def require_push(msg: Message, state: FSMContext):
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫. –Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–∞–ª—å—à–µ, –ø–æ–∫–∞ –æ–Ω–∏ —Ç—É—Ç üòì")


@dp.message_handler(commands=["start"], state=None)
async def start(msg: Message, dialog_manager: DialogManager):
    await dialog_manager.start(DishDialog.select_dish)


@dp.message_handler(Command('dish'))
async def select_dish_action(msg: Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=dish_menu)
    await DishState.select_dish_action.set()

@dp.message_handler(state=DishState.select_dish_action)
async def continue_dish_action(msg: Message, state: FSMContext, dialog_manager: DialogManager):
    if msg.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é':
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=ReplyKeyboardRemove())
        await DishState.insert_name.set()
    elif msg.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏':
        await dialog_manager.start(DishDialog.select_dish)

@dp.message_handler(state=DishState.insert_name)
async def add_price_to_dish(msg: Message, state: FSMContext):
    await state.update_data({'dish_name': msg.text})
    await msg.answer(f"–ü–æ–∑–∏—Ü–∏—è {msg.text}. –¶–µ–Ω–∞:")
    await DishState.insert_price.set()

@dp.message_handler(state=DishState.insert_price)
async def assert_dish(msg: Message, state: FSMContext):
    try:
        price = float(msg.text)
        data = await state.get_data()
        dish_name = data['dish_name']
        await msg.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–æ–¥ –ø–æ–∑–∏—Ü–∏–∏: {dish_name}, —Ü–µ–Ω–∞: {price}", 
                           reply_markup=confirm_dish_menu)
        await state.update_data({"dish_price": price})
        await DishState.confirm_dish.set()
    except BaseException:
        await msg.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –û—Å—Ç–∞—Ç–æ–∫ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è —Å–∏–º–æ–≤–æ–ª–æ–º ".". –ù–∞–ø—Ä–∏–º–µ—Ä: 49.99')

@dp.message_handler(state=DishState.confirm_dish)
async def create_dish(msg: Message, state: FSMContext):
    match msg.text:
        case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            data = await state.get_data()
            dish_name = data["dish_name"]
            dish_price = data["dish_price"]
            if 'old_dish' in data.keys(): #–ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ dialog-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (DishState.edit_dish)
                dish = Dish.objects.filter(id=data['old_dish'])
                dish.delete()
            dish = Dish.objects.filter(name=dish_name).first()
            if dish:
                dish.price = dish_price
            else:
                dish = Dish(name=dish_name, price=dish_price)
            dish.save()
            await msg.answer(f"–ü–æ–∑–∏—Ü–∏—è {dish_name} c —Ü–µ–Ω–æ–π {dish_price} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.",
                             reply_markup=ReplyKeyboardRemove()) 
            await state.reset_state(with_data=True)
        case "–û—Ç–º–µ–Ω–∞":
            await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
            await state.reset_state(with_data=True)    

@dp.message_handler(commands=['help'], state=None)
async def show_help(msg: Message):
    h = Path(__file__).with_name('help.txt')
    with h.open('r', encoding='utf-8') as response:
        await msg.answer(response.read(), reply_markup=ReplyKeyboardRemove())
        response.close()
